import socket
import requests
from typing import List


def scan_open_ports(target: str, ports: List[int]) -> List[int]:
    """Scan for open ports on a given target."""
    open_ports = []
    for port in ports:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.settimeout(1)  # Timeout for connection
            result = s.connect_ex((target, port))
            if result == 0:  # Port is open
                open_ports.append(port)
    return open_ports


def check_http_headers(url: str) -> List[str]:
    """Check HTTP headers for potential misconfigurations."""
    vulnerabilities = []
    try:
        response = requests.head(url)
        headers = response.headers

        # Check for missing security headers
        if 'Strict-Transport-Security' not in headers:
            vulnerabilities.append("Missing 'Strict-Transport-Security' header.")
        if 'Content-Security-Policy' not in headers:
            vulnerabilities.append("Missing 'Content-Security-Policy' header.")
        if 'X-Frame-Options' not in headers:
            vulnerabilities.append("Missing 'X-Frame-Options' header.")
        if 'X-Content-Type-Options' not in headers:
            vulnerabilities.append("Missing 'X-Content-Type-Options' header.")
    except requests.RequestException as e:
        vulnerabilities.append(f"Failed to retrieve headers: {e}")
    return vulnerabilities


def scan_outdated_software(software_list: List[str]) -> List[str]:
    """Check if specified software versions are outdated."""
    outdated_software = []
    for software in software_list:
        try:
            # Using subprocess to get the software version
            result = subprocess.run([software, '--version'], capture_output=True, text=True)
            if result.returncode == 0:
                version = result.stdout.strip()
                outdated_software.append(f"{software}: Detected version {version}. (Manual review needed)")
            else:
                outdated_software.append(f"{software}: Could not determine version.")
        except FileNotFoundError:
            outdated_software.append(f"{software}: Not installed.")
    return outdated_software


def main():
    print("Simple Vulnerability Scanning Tool\n")

    # Get user input
    target = input("Enter the target (IP or domain): ").strip()
    ports_to_scan = list(range(20, 1025))  # Scanning common ports
    url = f"http://{target}"

    # Perform scans
    print("\nScanning for open ports...")
    open_ports = scan_open_ports(target, ports_to_scan)
    if open_ports:
        print(f"Open ports detected: {open_ports}")
    else:
        print("No open ports detected.")

    print("\nChecking HTTP headers...")
    header_issues = check_http_headers(url)
    if header_issues:
        print("HTTP header vulnerabilities:")
        for issue in header_issues:
            print(f"- {issue}")
    else:
        print("No HTTP header issues detected.")

    print("\nChecking for outdated software...")
    software_list = ['nginx', 'apache2', 'mysql', 'python3']  # Example software
    outdated_software = scan_outdated_software(software_list)
    if outdated_software:
        print("Outdated software or issues:")
        for issue in outdated_software:
            print(f"- {issue}")
    else:
        print("No outdated software detected.")

    print("\nScan complete.")


if __name__ == "__main__":
    main()
